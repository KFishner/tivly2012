from django import template
from datetime import date
from meetPlanner.utils import *
import math
register = template.Library()

"""given a birthday, return the age of the swimmer"""
def age(born):
    today = date.today()
    
    try: # raised when birth date is February 29 and the current year is not a leap year
        birthday = born.replace(year=today.year)
    except ValueError:
        birthday = born.replace(year=today.year, day=born.day-1)
    if birthday > today:
        return today.year - born.year - 1
    else:
        return today.year - born.year
register.filter('age', age)

def eventtostring(event):
        g = "Women's"
        rel = ""
        if event.gender == 'M':
            g = "Men's"
        elif event.gender == 'B':
            g = "Mixed"
        if event.relay == True:
            rel = " Relay"

        special = False
        if event.agelow == 13 and event.agehigh == 30:
            name = ""
            special = True
        if event.agelow == 10 and event.agehigh == 25:
            name = ""
            special = True
        if event.agelow == 10 and event.agehigh == 100:
            name = ""
            special = True
        if event.agelow == 0 and event.agehigh == 99:
            name = "Open"
            special = True
        if event.agelow == 0 and event.agehigh == 100:
            name = "Open"
            special = True            
        if event.agelow == 0 and event.agehigh == 8:
            name = "8/U"
            special = True
        if event.agelow == 0 and event.agehigh == 10:
            name = "10/U"
            special = True
            
        if special == False:
            return '%s-%s %s %s %s%s' % (event.agelow, event.agehigh, g, event.distance, event.stroke, rel)
        else:
            return '%s %s %s %s%s' % (name, g, event.distance, event.stroke, rel)
register.filter('eventtostring', eventtostring)
def my(my):
    if my == 'M':
        return 'Meter'
    if my == 'Y':
        return 'Yard'
    return "bad input"
register.filter('my',my)

def msys(msys):
    if msys == 'M':
        return 'Meters'
    if msys == 'Y':
       return 'Yards'
    return "bad input"
register.filter('msys',msys)

def coursetype(course):
    if course == 'SCM':
        return 'Short Course Meters'
    if course == 'SCY':
       return 'Short Course Yards'
    if course == 'LCM':
       return 'Long Course Meters'       
    return "bad input"
register.filter('coursetype',coursetype)

def sclc(sclc):
    if sclc == 'S':
        return "Short Course"
    if sclc == 'L':
        return "Long Course"
    return "bad input"
register.filter('sclc',sclc)

def mttype(mt):
    if mt == 'age':
        return "Age Group"
    elif mt == 'college':
        return "College"
    elif mt == 'high':
        return "High School"
    elif mt == 'masters':
        return "Masters"
    elif mt == 'open':
        return "Open"
    elif mt == 'na':
        return "None Selected"
    else:
        return "bad input"
register.filter('mttype', mttype)

def gender(gen):
    if gen == 'M':
        return "Male"
    elif gen == "F":
        return "Female"
    elif gen == "B":
        return "Both"
    else:
        return "bad input"
register.filter('gender',gender)

def makeQuotesDouble(input):
    string = str(input)
    return string.replace("'", '"')
register.filter('makeQuotesDouble',makeQuotesDouble)

def eventStr(input):
    return str(input)
register.filter('eventStr',eventStr)


#return MM:SS.HH rep of second float
#return MM:SS.HH rep of second float
def inflatetime(time):
    if time is None:
        return "NT"
    if time is "NT":
        return "NT"
    time = float(time)

    milsec = time - int(time)
    milsec, sec = math.modf(time)
    milsec = milsec * 100
    minutes = int(sec) / int(60)
    sec =  sec - (minutes * 60)
    if minutes is not 0:
        inflated = '%d:%02d.%02.f' % (minutes, sec, milsec)
    else:
        inflated = '%d.%02.f' % (sec,milsec)
    return inflated

register.filter('inflatetime',inflatetime)

"""return a string naming the events the swimmer is participating in, for use
in the scheduler page as a tooltip"""
def schedTooltip(mappings, swimmerName):
    try:
        events_in = []
        for event, swimmers in mappings.items():
            for swimmer in swimmers:
                if swimmer == swimmerName:
                    events_in.append(event)
        events_in_str = ""
        for event in events_in:
            events_in_str += str(event) + "</br>"
        if len(events_in) == 1:
            return "Swimming in 1 event:</br>%s</br>Click on swimmer's name for detailed stats." % events_in_str
        else:
            return "Swimming in %d events:</br>%s</br>Click on swimmer's name for detailed stats." %(
                len(events_in), events_in_str)
    except Exception as e:
        print e
        return "Click on swimmer's name for detailed stats."


register.filter('schedTooltip',schedTooltip)

''' return a string naming the eligible swimmers in an event, for use
in the scheduler page as a tooltip'''
def eligTooltip(eligmap, event):
    if event.pk in eligmap:
        swimmers = eligmap[event.pk]
    else:
        return "Sorry, but there are no eligible swimmers."
    
    eligstr = ""
    for i, swimmer in enumerate(swimmers):
        if i > 20:
            eligstr += "<b>And %d more</b>" %(len(swimmers) - i)
            return eligstr
        eligstr += str(swimmer) + "</br>"
    return eligstr

register.filter('eligTooltip', eligTooltip)

"""return a the unique profile link for the swimmer"""
def getLink(swimmer):
    try:
        return getUniqueLink(swimmer)
    except Exception as e:
        print e
        return "Unable to create link"

register.filter('getLink', getLink)










